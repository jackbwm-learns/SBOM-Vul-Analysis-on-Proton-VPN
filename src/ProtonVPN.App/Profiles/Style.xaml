<!--
Copyright (c) 2023 Proton AG

This file is part of ProtonVPN.

ProtonVPN is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ProtonVPN is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ProtonVPN.  If not, see <https://www.gnu.org/licenses/>.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:profiles="clr-namespace:ProtonVPN.Core.Profiles;assembly=ProtonVPN.Core"
                    xmlns:icons="clr-namespace:ProtonVPN.Resource.Graphics.Icons;assembly=ProtonVPN.Resource"
                    xmlns:appProfiles="clr-namespace:ProtonVPN.Profiles">

    <Style x:Key="UpgradeRequiredText" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding UpgradeRequired}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource TextDisabledBrushColor}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ProfileFormPlaceholder" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource TextHintBrushColor}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Visibility" Value="Hidden"/>
    </Style>
    <Style x:Key="ErrorsPanel" TargetType="Grid">
        <Setter Property="MinHeight" Value="55"/>
        <Setter Property="Background" Value="{StaticResource NotificationErrorBrushColor}"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Margin" Value="0,0,0,66"/>
    </Style>
    <Style x:Key="ServerTypeButton" TargetType="Button" BasedOn="{StaticResource PrimaryModalButton}">
        <Setter Property="Margin" Value="7,0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="22,0"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="FontSize" Value="14"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource MultiValueEqualityConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}" Path="DataContext.ServerType" Mode="OneWay"/>
                                <Binding RelativeSource="{RelativeSource Self}" Path="DataContext" Mode="OneWay"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsEnabled}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Padding" Value="20,0"/>
                <Setter Property="BorderBrush" Value="{StaticResource InteractionWeakBrushColor}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource TextNormBrushColor}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource MultiValueEqualityConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}" Path="DataContext.ServerType" Mode="OneWay"/>
                                <Binding RelativeSource="{RelativeSource Self}" Path="DataContext" Mode="OneWay"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsEnabled}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Padding" Value="20,0"/>
                <Setter Property="BorderBrush" Value="{StaticResource BorderWeakBrushColor}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource TextDisabledBrushColor}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource MultiValueEqualityConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}" Path="DataContext.ServerType" Mode="OneWay"/>
                                <Binding RelativeSource="{RelativeSource Self}" Path="DataContext" Mode="OneWay"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="22,0"/>
                <Setter Property="Border.BorderBrush" Value="Transparent"/>
                <Setter Property="Background" Value="{StaticResource InteractionWeakHoverBrushColor}"/>
                <Setter Property="Foreground" Value="{StaticResource TextNormBrushColor}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ProfileSyncStatusIcon" TargetType="UserControl">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
    </Style>
    <Style x:Key="ProfileSyncStatusSpinnerIcon" TargetType="UserControl" BasedOn="{StaticResource ProfileSyncStatusIcon}">
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetProperty="(UserControl.RenderTransform).(RotateTransform.Angle)"
                            From="0" To="360" Duration="0:0:1" RepeatBehavior="Forever" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="ProfileSyncStatusImage" DataType="{x:Type profiles:ProfileSyncStatus}">
        <StackPanel x:Name="IconContainer" Width="16" Height="16">
            <icons:ArrowsRotate x:Name="InProgressIcon" 
                                Style="{StaticResource ProfileSyncStatusSpinnerIcon}" 
                                Foreground="{StaticResource TextNormBrushColor}" />
            <icons:CheckmarkCircleFilled x:Name="SucceededIcon" 
                                         Style="{StaticResource ProfileSyncStatusIcon}" 
                                         Foreground="{StaticResource PrimaryBrushColor}" />
            <icons:ExclamationCircleFilled x:Name="FailedIcon" 
                                           Style="{StaticResource ProfileSyncStatusIcon}" 
                                           Foreground="{StaticResource NotificationErrorBrushColor}" />
            <icons:InfoCircleFilled x:Name="OverriddenIcon" 
                                    Style="{StaticResource ProfileSyncStatusIcon}" 
                                    Foreground="{StaticResource NotificationWarningBrushColor}" />
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding}" Value="{x:Static profiles:ProfileSyncStatus.InProgress}">
                <Setter TargetName="InProgressIcon" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="{x:Static profiles:ProfileSyncStatus.Succeeded}">
                <Setter TargetName="SucceededIcon" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="{x:Static profiles:ProfileSyncStatus.Failed}">
                <Setter TargetName="FailedIcon" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="{x:Static profiles:ProfileSyncStatus.Overridden}">
                <Setter TargetName="OverriddenIcon" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <Style x:Key="ProfileIconStyle" TargetType="UserControl">
        <Setter Property="Foreground" Value="{StaticResource TextNormBrushColor}"/>
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>
    <DataTemplate x:Key="ProfileIconDataTemplate" DataType="{x:Type appProfiles:PredefinedProfileViewModel}">
        <StackPanel x:Name="IconContainer"
                    VerticalAlignment="Center"
                    Height="{TemplateBinding Height}"
                    Width="{TemplateBinding Width}">
            <icons:Bolt x:Name="Bolt" 
                        Style="{StaticResource ProfileIconStyle}"
                        Height="{TemplateBinding Height}"
                        Width="{TemplateBinding Width}" />
            <icons:ArrowsSwapRight x:Name="ArrowsSwapRight" 
                                   Style="{StaticResource ProfileIconStyle}"
                                   Height="{TemplateBinding Height}"
                                   Width="{TemplateBinding Width}" />
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Icon}" Value="Bolt">
                <Setter TargetName="Bolt" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Icon}" Value="ArrowsSwapRight">
                <Setter TargetName="ArrowsSwapRight" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>
