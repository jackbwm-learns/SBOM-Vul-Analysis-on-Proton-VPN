<!--
Copyright (c) 2023 Proton AG

This file is part of ProtonVPN.

ProtonVPN is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ProtonVPN is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ProtonVPN.  If not, see <https://www.gnu.org/licenses/>.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:behaviour="clr-namespace:ProtonVPN.Core.Wpf.Behavior"
                    xmlns:splittunneling="clr-namespace:ProtonVPN.Settings.SplitTunneling"
                    xmlns:settings="clr-namespace:ProtonVPN.Settings"
                    xmlns:icons="clr-namespace:ProtonVPN.Resource.Graphics.Icons;assembly=ProtonVPN.Resource">

    <Style x:Key="SettingsAddButton" TargetType="Button" BasedOn="{StaticResource ClearStyleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Border.CornerRadius" Value="16"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="6,0,6,0"/>
        <Setter Property="Command" Value="{Binding AddCommand}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            SnapsToDevicePixels="True"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            Padding="0"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                        <StackPanel Orientation="Horizontal" Margin="5,5,5,5" VerticalAlignment="Center" HorizontalAlignment="Right">
                            <ContentPresenter x:Name="contentPresenter" 
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Visibility="{c:Binding 'Content!=null', RelativeSource={RelativeSource TemplatedParent}}"/>
                            <icons:Plus x:Name="icon" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TextDisabledBrushColor}"/>
                            <Setter Property="Foreground" TargetName="icon" Value="{StaticResource TextDisabledBrushColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource InteractionNormAccentHoverBrushColor}"/>
                            <Setter Property="Foreground" TargetName="icon" Value="{StaticResource InteractionNormAccentHoverBrushColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="SettingsRemoveButton" TargetType="Button" BasedOn="{StaticResource ClearStyleButton}">
        <Setter Property="Foreground" Value="{StaticResource TextHintBrushColor}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <icons:Trash x:Name="Icon"
                                 Width="16"
                                 Background="Transparent"
                                 Foreground="{TemplateBinding Foreground}"
                                 VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                 HorizontalAlignment="{TemplateBinding HorizontalAlignment}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource TextDisabledBrushColor}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource SignalDangerBrushColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PlaceholderTextBox" TargetType="TextBox">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="CaretBrush" Value="{StaticResource TextNormBrushColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Panel.ZIndex="2" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            <Label Panel.ZIndex="1"
                                    BorderBrush="{x:Null}"
                                    BorderThickness="0"
                                    Background="{x:Null}"
                                    IsHitTestVisible="False"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    Foreground="{StaticResource TextHintBrushColor}"
                                    Content="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                <Label.Style>
                                    <Style TargetType="Label">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Label.Style>
                            </Label>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SettingsPlaceholderTextBox" TargetType="TextBox" BasedOn="{StaticResource PlaceholderTextBox}">
        <Setter Property="Foreground" Value="{StaticResource TextNormBrushColor}"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderWeakBrushColor}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <DataTemplate DataType="{x:Type splittunneling:AppViewModel}">
        <DockPanel Margin="0,0,0,0">
            <Image Width="24" 
                   Height="24"
                   Margin="0,0,10,0"
                   VerticalAlignment="Center"
                   Visibility="{Binding FileExists, Converter={StaticResource BoolToVis}}"
                   Source="{Binding Path, Converter={StaticResource FilePathToImageSourceConverter}}"/>

            <icons:CrossCircleFilled Foreground="{StaticResource SignalDangerBrushColor}" Width="26" Margin="3,0,10,0">
                <icons:CrossCircleFilled.Style>
                    <Style TargetType="UserControl">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding FileExists}" Value="False">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </icons:CrossCircleFilled.Style>
            </icons:CrossCircleFilled>

            <TextBlock Padding="0,0,0,3" FontSize="16" Foreground="{StaticResource TextNormBrushColor}" VerticalAlignment="Center" 
                       Text="{Binding Name}"
                       TextTrimming="CharacterEllipsis">
                <i:Interaction.Behaviors>
                    <behaviour:TextBlockAutoToolTipBehavior/>
                </i:Interaction.Behaviors>
            </TextBlock>
        </DockPanel>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type settings:IpViewModel}">
        <DockPanel>
            <TextBlock Padding="0,0,0,3" FontSize="16" Foreground="{StaticResource TextNormBrushColor}" VerticalAlignment="Center"
                       Text="{Binding Ip}"/>
        </DockPanel>
    </DataTemplate>
    
    <DataTemplate x:Key="DeletableItem">
        <DockPanel Height="32">
            <Button Margin="0,0,10,0" DockPanel.Dock="Left" Style="{StaticResource SettingsRemoveButton}"
                    Command="{Binding DataContext.RemoveCommand, RelativeSource={RelativeSource AncestorType=ItemsControl, Mode=FindAncestor}}"
                    CommandParameter="{Binding}"/>
            <ContentPresenter Content="{Binding}" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
        </DockPanel>
    </DataTemplate>
    
    <DataTemplate x:Key="SelectableWrappedItem">
        <DockPanel Height="32">
            <CheckBox Margin="0,0,5,0" VerticalAlignment="Center"
                      Style="{StaticResource Checkbox}"
                      IsChecked="{Binding Selected, Mode=TwoWay}"
                      FocusVisualStyle="{x:Null}"/>
            <ContentPresenter Content="{Binding Item}" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
        </DockPanel>
    </DataTemplate>
    
    <DataTemplate x:Key="SelectableDeletableWrappedItem">
        <DockPanel Height="32">
            <CheckBox Margin="0,0,5,0" VerticalAlignment="Center"
                      Style="{StaticResource Checkbox}"
                      IsChecked="{Binding Selected, Mode=TwoWay}"
                      FocusVisualStyle="{x:Null}"/>
            <Button Margin="10,0,0,0" DockPanel.Dock="Right" Style="{StaticResource SettingsRemoveButton}"
                    Command="{Binding DataContext.RemoveCommand, RelativeSource={RelativeSource AncestorType=ItemsControl, Mode=FindAncestor}}"
                    CommandParameter="{Binding}" 
                    AutomationProperties.AutomationId="{StaticResource DeleteButton}"/>
            <ContentPresenter Content="{Binding Item}" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
        </DockPanel>
    </DataTemplate>
    
    <DataTemplate x:Key="SelectableDeletableWrappedApp">
        <DockPanel Height="32">
            <CheckBox Margin="0,0,5,0" VerticalAlignment="Center"
                      Style="{StaticResource Checkbox}"
                      IsChecked="{Binding Selected, Mode=TwoWay}"
                      FocusVisualStyle="{x:Null}"/>
            <Button Margin="10,0,0,0" DockPanel.Dock="Right" Style="{StaticResource SettingsRemoveButton}"
                    Command="{Binding DataContext.RemoveCommand, RelativeSource={RelativeSource AncestorType=ItemsControl, Mode=FindAncestor}}"
                    CommandParameter="{Binding}"
                    Visibility="{c:Binding '!Item.Suggested', FalseToVisibility=Hidden}"/>
            <ContentPresenter Content="{Binding Item}" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
        </DockPanel>
    </DataTemplate>

    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="20" Height="20">
                                <Ellipse x:Name="Border" StrokeThickness="1" Stroke="Transparent" />
                                <Ellipse x:Name="CheckMark" Margin="5" Visibility="Collapsed" Fill="{StaticResource TextNormBrushColor}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"
                                          RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="Border" Value="{StaticResource TextNormBrushColor}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="Border" Value="{StaticResource InteractionNormHoverBrushColor}"/>
                            <Setter Property="Fill" TargetName="Border" Value="{StaticResource InteractionNormHoverBrushColor}"/>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="Border" Value="{StaticResource TextDisabledBrushColor}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="Border" Value="{StaticResource TextDisabledBrushColor}"/>
                            <Setter Property="Fill" TargetName="Border" Value="{StaticResource TextDisabledBrushColor}"/>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="Border" Value="{StaticResource TextWeakBrushColor}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="Border" Value="{StaticResource InteractionNormBrushColor}"/>
                            <Setter Property="Fill" TargetName="Border" Value="{StaticResource InteractionNormBrushColor}"/>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
